{"version":3,"sources":["objects/rotors/rotors.ts","services/rotors/rotors-slice.ts","services/utils/array-alphabet.ts","services/utils/keys.ts","services/machine/utils.ts","services/utils/modulo.ts","services/machine/machine-slice.ts","rootReducer.ts","store.ts","theme/custom-theme.ts","services/providers/index.tsx","services/machine/machine-selector.ts","theme/utils.ts","scenes/letter-key/index.tsx","scenes/keyboard/row.tsx","scenes/keyboard/output.tsx","scenes/keyboard/index.tsx","scenes/input-output-text/index.tsx","services/input-output-text/utils.ts","scenes/app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["rotorI","name","type","turnOver","keys","split","rotorII","rotorIII","reflectorUKWB","initialState","rotorSlice","createSlice","reducers","alphabet","nonEncodableKeys","validKeys","getAlphabetKeyNum","key","findIndex","k","toUpperCase","getAlphabetKeyByNum","keyNum","getKeyNumWithPosition","position","op","keyNumOpsPosition","n","x","length","encode","slots","initialKeyNum","isSecondPass","reduce","slot","console","log","rotor","keyIdx","keyValue","inputKeyNumWithPosition","inputKeyLetter","outputKeyNum","indexOf","outputKey","totalInput","totalOutput","slotSlice","handleRotorRotation","state","action","some","idx","newPosition","handleRotation","inputKey","payload","initialKey","firstPassEncodedKeyNum","reverse","shift","secondPassEncodedKeyNum","handleEncoding","handleNonEncodableKeys","slice","actions","rootReducer","combineReducers","rotors","rotorReducer","machine","machineReducer","store","configureStore","reducer","theme","borderRadius","colors","white","primary","litLetter","font","size","baseline","Providers","children","getMachine","selectOutputKey","createSelector","selectTotalOutput","themeModifier","themeProp","modifier","regex","match","prop","unit","convertedProp","parseFloat","$Container","styled","div","p","isLit","$Letter","LetterKey","letter","memoizedLetterKey","React","memo","KeyboardRow","letters","activeKey","map","memoizedKeyboardRow","row1","row2","row3","OutputKeyboard","KeyBoardController","useSelector","$TextAreaContainer","$InputTextArea","textarea","$OutputTextArea","InputOutputTextArea","useState","inputText","setInputText","dispatch","useDispatch","handleKeyInput","useCallback","e","target","value","includes","getIsNonEncodableKey","preventDefault","onKeyDown","disabled","$Header","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d08215fb.chunk.js","sourcesContent":["export const rotorI: Rotor = {\n  name: 'rotorI',\n  type: 'rotor',\n  turnOver: 16, // 16 is Q\n  keys: 'EKMFLGDQVZNTOWYHXUSPAIBRCJ'.split('')\n};\n\nexport const rotorII: Rotor = {\n  name: 'rotorII',\n  type: 'rotor',\n  turnOver: 4, // 4 is E\n  keys: 'AJDKSIRUXBLHWTMCQGZNPYFVOE'.split('')\n};\n\nexport const rotorIII: Rotor = {\n  name: 'rotorIII',\n  type: 'rotor',\n  turnOver: 21, // 21 is V\n  keys: 'BDFHJLCPRTXVZNYEIWGAKMUSQO'.split('')\n};\n\nexport const reflectorUKWB: Rotor = {\n  name: 'UKW-B',\n  type: 'reflector',\n  keys: 'YRUHQSLDPXNGOKMIEBFZCWVJAT'.split('')\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { rotorI, rotorII, rotorIII } from '../../objects/rotors/rotors';\n\nconst initialState: RotorStore = [rotorI, rotorII, rotorIII];\n\nconst rotorSlice = createSlice({\n  name: 'handleRotors',\n  initialState,\n  reducers: {}\n});\n\nexport default rotorSlice.reducer;\n","export const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nexport const nonEncodableKeys = [' '];\nexport const validKeys = [...alphabet, ...nonEncodableKeys];\n","import { alphabet } from './array-alphabet';\n\nexport const getAlphabetKeyNum = (key: string) => alphabet.findIndex(k => k === key.toUpperCase());\n\nexport const getAlphabetKeyByNum = (keyNum: number) => alphabet[keyNum] || '';\n","import { getAlphabetKeyByNum, getAlphabetKeyNum } from '../utils/keys';\nimport { alphabet } from '../utils/array-alphabet';\nimport { modulo } from '../utils/modulo';\n\nconst getKeyNumWithPosition = (keyNum: number, position: number, op: 'add' | 'subtract') => {\n  let keyNumOpsPosition;\n  switch (op) {\n    case 'add':\n      keyNumOpsPosition = keyNum + position;\n      break;\n\n    case 'subtract':\n      keyNumOpsPosition = keyNum - position;\n      break;\n\n    default:\n      keyNumOpsPosition = null;\n  }\n\n  if (keyNumOpsPosition === null) return -1;\n  return modulo(keyNumOpsPosition, alphabet.length);\n};\n\nconst getOutputKeyNum = (\n  keys: string[],\n  keyIdx: number,\n  keyValue: string,\n  findByIndex?: boolean\n) => {\n  if (findByIndex) {\n    return keys.indexOf(keyValue);\n  }\n\n  return getAlphabetKeyNum(keys[keyIdx]);\n};\n\nconst encode = (slots: Slot[], initialKeyNum: number, isSecondPass?: boolean) => {\n  const encodedKeyNum = slots.reduce((keyNum: number, slot) => {\n    console.log('-------------------------');\n    console.log(`slot: ${slot.name} at position ${slot.position}. Given keyNum: ${keyNum}. Using rotor: ${slot.rotor.name}, with keys: ${slot.rotor.keys}`);\n    if (keyNum < 0) return -1;\n    const inputKeyNumWithPosition = getKeyNumWithPosition(keyNum, slot.position, 'add');\n    const inputKeyLetter = getAlphabetKeyByNum(inputKeyNumWithPosition);\n    const outputKeyNum = getOutputKeyNum(\n      slot.rotor.keys,\n      inputKeyNumWithPosition,\n      inputKeyLetter,\n      isSecondPass\n    );\n    console.log('Calc key as', getAlphabetKeyByNum(outputKeyNum));\n    console.log('Key num is, ', outputKeyNum);\n    console.log('output key num with positiuon', getKeyNumWithPosition(outputKeyNum, slot.position, 'subtract'));\n    return getKeyNumWithPosition(outputKeyNum, slot.position, 'subtract');\n  }, initialKeyNum);\n  return encodedKeyNum;\n};\n\nexport const handleEncoding = (slots: Slot[], initialKey: string) => {\n  // don't encode spaces\n  if (initialKey === ' ') return ' ';\n\n  const firstPassEncodedKeyNum = encode(slots, getAlphabetKeyNum(initialKey));\n  const secondPassSlots = slots.reverse();\n  secondPassSlots.shift(); // remove the reflector as it was used in the first pass.\n\n  console.log('first pass num: ', firstPassEncodedKeyNum);\n\n  const secondPassEncodedKeyNum = encode(slots, firstPassEncodedKeyNum, true);\n  console.log('second pass num: ', secondPassEncodedKeyNum);\n  return getAlphabetKeyByNum(secondPassEncodedKeyNum);\n};\n\nexport const handleRotation = (slots: Slot[]) => {\n  slots.some((slot, idx) => {\n    // reflectors don't have positions; so return\n    if (slot.rotor.type === 'reflector') return true;\n\n    // calculate slots new position\n    const newPosition = slot.position >= 25 ? 0 : slot.position + 1;\n    slots[idx].position = newPosition;\n\n    return !!(slot.rotor.turnOver !== slot.position);\n  });\n};\n\nexport const resetSlots = (slots: Slot[]) => {\n  slots.forEach(slot => {\n    slot.position = 0;\n  });\n};\n","export const modulo = (n: number, x: number) => ((n % x) + x) % x;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { rotorI, rotorII, rotorIII, reflectorUKWB } from '../../objects/rotors/rotors';\nimport { handleEncoding, handleRotation, resetSlots } from './utils';\n\nconst initialState: MachineStore = {\n  slots: [\n    {\n      name: 'slot1',\n      rotor: rotorI,\n      position: 0\n    }, {\n      name: 'slot2',\n      rotor: rotorII,\n      position: 0\n    }, {\n      name: 'slot3',\n      rotor: rotorIII,\n      position: 0\n    },\n    {\n      name: 'slot4',\n      rotor: reflectorUKWB,\n      position: 0\n    }\n  ],\n  outputKey: '',\n  totalInput: '',\n  totalOutput: ''\n};\n\nconst slotSlice = createSlice({\n  name: 'handleSlots',\n  initialState,\n  reducers: {\n    handleRotorRotation(state, action: PayloadAction<string>) {\n      const { slots } = state;\n\n      // handles positioning of rotors\n      handleRotation(slots);\n\n      // handles encoding\n      const inputKey = action.payload;\n      // passing copy of array to avoid the function making changes to state array.\n      const outputKey = handleEncoding([...slots], inputKey);\n\n      state.totalInput += inputKey;\n      state.outputKey = outputKey;\n      state.totalOutput += outputKey;\n    },\n    handleNonEncodableKeys(state, action: PayloadAction<NonEncodableKey>) {\n      const inputKey = action.payload.toUpperCase();\n      const { slots } = state;\n\n      switch (inputKey) {\n        case ' ':\n          state.totalOutput += ' ';\n          break;\n        case 'BACKSPACE': {\n          // state.totalInput = action.payload.inputText;\n          // resetSlots(slots);\n          // const encodedKeys = state.totalInput.split('').map(key => {\n          //   handleRotation(slots);\n          //   return handleEncoding([...slots], key);\n          // });\n\n          // state.outputKey = encodedKeys[encodedKeys.length - 1];\n          // state.totalOutput = encodedKeys.join();\n          break;\n        }\n        case 'DELETE':\n          state.totalInput = state.totalInput.slice(0, -1);\n          state.totalOutput = state.totalOutput.slice(0, -1);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n});\n\nexport const {\n  handleRotorRotation,\n  handleNonEncodableKeys\n} = slotSlice.actions;\n\nexport default slotSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport rotorReducer from './services/rotors/rotors-slice';\nimport machineReducer from './services/machine/machine-slice';\n\nconst rootReducer = combineReducers({\n  rotors: rotorReducer,\n  machine: machineReducer\n});\n\nexport type EnigmaStore = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import { DefaultTheme } from 'styled-components';\n\nexport const theme: DefaultTheme = {\n  borderRadius: '6px',\n  colors: {\n    white: 'white',\n    primary: 'red',\n    litLetter: '#7a7b3d'\n  },\n  font: {\n    size: '1em'\n  },\n  baseline: '24px'\n};\n","import React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\n\nimport store from '../../store';\nimport { theme } from '../../theme/custom-theme';\n\nconst Providers: React.FC = ({ children }) => (\n  <ReduxProvider store={store}>\n    <ThemeProvider theme={theme}>\n      {children}\n    </ThemeProvider>\n  </ReduxProvider>\n);\n\nexport default Providers;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { EnigmaStore } from '../../rootReducer';\n\nexport const getMachine = (state: EnigmaStore) => state.machine;\nexport const getSlots = (state: EnigmaStore) => state.machine.slots;\n\nexport const selectSlots = createSelector(\n  [getMachine],\n  machine => machine.slots\n);\n\nexport const selectOutputKey = createSelector(\n  [getMachine],\n  machine => machine.outputKey\n);\n\nexport const selectTotalOutput = createSelector(\n  [getMachine],\n  machine => machine.totalOutput\n);\n","export const themeModifier = (themeProp: string, modifier: number = 1) => {\n  const regex = /^(^-?\\d+(?:\\.\\d+)?)(.*)$/;\n  const match = themeProp.match(regex);\n  if (!match) return themeProp;\n\n  const [, prop, unit] = match;\n  const convertedProp = parseFloat(prop);\n\n  if (!convertedProp || !unit) return themeProp;\n  return `${convertedProp * modifier}${unit}`;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\n\ntype Props = {\n  letter: string;\n  isLit?: boolean;\n}\n\ntype $Props = {\n  isLit: boolean;\n}\n\nconst $Container = styled.div<$Props>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => themeModifier(p.theme.baseline, 3)};\n  height: ${p => themeModifier(p.theme.baseline, 3)};\n  border-radius: 50%;\n  border: 2px solid lightgray;\n  background-color: ${p => (p.isLit ? p.theme.colors.litLetter : 'grey')};\n  margin-left: ${p => themeModifier(p.theme.baseline, 0.25)};\n  margin-right: ${p => themeModifier(p.theme.baseline, 0.25)};\n`;\n\nconst $Letter = styled.p`\n  color: ${p => p.theme.colors.white};\n  font-size: ${p => themeModifier(p.theme.font.size, 2)};\n  flex: 0;\n`;\n\nconst LetterKey: React.FC<Props> = ({ letter, isLit = false }) => (\n  <$Container isLit={isLit}>\n    <$Letter>{letter.toUpperCase()}</$Letter>\n  </$Container>\n);\n\nconst memoizedLetterKey = React.memo(LetterKey);\n\nexport { memoizedLetterKey as LetterKey };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\n\nimport { LetterKey } from '../letter-key';\n\ntype Props = {\n  letters: string[];\n  activeKey: string;\n}\n\nconst $Container = styled.div`\n  display: flex;\n  margin-bottom: ${p => themeModifier(p.theme.baseline, 0.5)};\n`;\n\nconst KeyboardRow: React.FC<Props> = ({ letters, activeKey }) => (\n  <$Container>\n    {letters.map(letter => {\n      const isLit = letter === activeKey;\n      return (\n        <LetterKey key={`${letter}`} letter={letter} isLit={isLit} />\n      );\n    })}\n  </$Container>\n);\n\nconst memoizedKeyboardRow = React.memo(KeyboardRow);\n\nexport { memoizedKeyboardRow as KeyboardRow };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { KeyboardRow } from './row';\n\ntype Props = {\n  activeKey: string;\n}\n\nconst row1 = 'QWERTYUIOP'.split('');\nconst row2 = 'ASDFGHJKL'.split('');\nconst row3 = 'ZXCVBNM'.split('');\n\nconst $Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const OutputKeyboard: React.FC<Props> = ({ activeKey }) => (\n  <$Container>\n    <KeyboardRow letters={row1} activeKey={activeKey} />\n    <KeyboardRow letters={row2} activeKey={activeKey} />\n    <KeyboardRow letters={row3} activeKey={activeKey} />\n  </$Container>\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectOutputKey } from '../../services/machine/machine-selector';\n\nimport { OutputKeyboard } from './output';\n\nexport const KeyBoardController = () => {\n  const outputKey = useSelector(selectOutputKey);\n\n  return (\n    <OutputKeyboard activeKey={outputKey} />\n  );\n};\n","import React, { useCallback, KeyboardEvent, ChangeEvent, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\nimport { getIsValidKey, getIsNonEncodableKey } from '../../services/input-output-text/utils';\nimport { selectTotalOutput } from '../../services/machine/machine-selector';\nimport { handleRotorRotation, handleNonEncodableKeys } from '../../services/machine/machine-slice';\n\nconst $Container = styled.div`\n  p {\n    color: ${p => themeModifier(p.theme.colors.white)}\n  }\n`;\n\nconst $TextAreaContainer = styled.div`\n  display: flex;\n  padding: ${p => themeModifier(p.theme.baseline, 1)};\n  \n  textarea {\n    flex: 1;\n    font-size: ${p => themeModifier(p.theme.font.size, 1.5)};\n    text-transform: uppercase;\n    height: 10em;\n    width: 30em;\n    margin: ${p => themeModifier(p.theme.baseline, 0.5)};\n    resize: none;\n  }\n`;\n\nconst $InputTextArea = styled.textarea`\n  height: 10em;\n`;\n\nconst $OutputTextArea = styled.textarea`\n  background-color: ${p => themeModifier(p.theme.colors.white)};\n`;\n\nexport const InputOutputTextArea = () => {\n  const [inputText, setInputText] = useState('');\n  const totalOutput = useSelector(selectTotalOutput);\n  const dispatch = useDispatch();\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setInputText(e.target.value);\n  }, [setInputText]);\n\n  const handleKeyInput = useCallback((e: KeyboardEvent<HTMLTextAreaElement>) => {\n    const inputKey = e.key;\n\n    // prevent invalid keys\n    const isValidKey = getIsValidKey(inputKey);\n    if (!isValidKey) {\n      e.preventDefault();\n      return;\n    }\n\n    // handle keys accordingly\n    if (getIsNonEncodableKey(inputKey)) {\n      const inputKeyTyped = inputKey as NonEncodableKey;\n\n      dispatch(handleNonEncodableKeys(inputKeyTyped));\n    } else {\n      dispatch(handleRotorRotation(inputKey));\n    }\n  }, [dispatch, inputText]);\n\n  return (\n    <$Container>\n      <p>{'Enter text below to be encypted'}</p>\n      <$TextAreaContainer>\n        <$InputTextArea onKeyDown={handleKeyInput} />\n        <$OutputTextArea disabled value={totalOutput} />\n      </$TextAreaContainer>\n    </$Container>\n  );\n};\n","import { validKeys, nonEncodableKeys } from '../utils/array-alphabet';\n\nexport const getIsValidKey = (key: string) => validKeys.includes(key.toUpperCase());\nexport const getIsNonEncodableKey = (key: string) => nonEncodableKeys.includes(key.toUpperCase());\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { KeyBoardController } from '../keyboard';\nimport { InputOutputTextArea } from '../input-output-text';\n\nconst $Container = styled.div`\n\n`;\n\nconst $Header = styled.h1`\n  color: ${p => p.theme.colors.white};\n`;\n\nconst App = () => (\n  <$Container>\n    <$Header>{'Engima'}</$Header>\n    <KeyBoardController />\n    <InputOutputTextArea />\n  </$Container>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Providers from './services/providers';\nimport App from './scenes/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}