{"version":3,"sources":["objects/rotors/rotors.ts","services/rotors/rotors-slice.ts","services/utils/array-alphabet.ts","services/utils/keys.ts","services/machine/utils.ts","services/utils/modulo.ts","services/machine/machine-slice.ts","rootReducer.ts","store.ts","theme/custom-theme.ts","services/providers/index.tsx","services/machine/machine-selector.ts","theme/utils.ts","scenes/letter-key/index.tsx","scenes/keyboard/row.tsx","scenes/keyboard/output.tsx","scenes/keyboard/index.tsx","scenes/input-output-text/index.tsx","services/input-output-text/utils.ts","scenes/app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["rotorI","name","type","turnOver","keys","split","rotorII","rotorIII","reflectorUKWB","initialState","rotorSlice","createSlice","reducers","alphabet","getAlphabetKeyNum","key","findIndex","k","toUpperCase","getAlphabetKeyByNum","keyNum","getKeyNumWithPosition","position","op","keyNumOpsPosition","n","x","length","encode","slots","initialKeyNum","isSecondPass","reduce","slot","console","log","rotor","keyIdx","keyValue","inputKeyNumWithPosition","inputKeyLetter","outputKeyNum","indexOf","handleEncoding","initialKey","firstPassEncodedKeyNum","reverse","shift","secondPassEncodedKeyNum","handleRotation","some","idx","newPosition","outputKey","totalInput","totalOutput","slotSlice","handleSingleRotorRotation","state","action","inputKey","payload","handleFullRotorRotation","forEach","resetSlots","encodedKeys","map","join","actions","rootReducer","combineReducers","rotors","rotorReducer","machine","machineReducer","store","configureStore","reducer","theme","borderRadius","colors","white","primary","litLetter","font","size","baseline","breakpoint","smallDesktop","tablet","smallTablet","mobile","Providers","children","getMachine","selectOutputKey","createSelector","selectTotalOutput","selectTotalInput","themeModifier","themeProp","modifier","regex","match","prop","unit","convertedProp","parseFloat","$Container","styled","div","p","isLit","$Letter","LetterKey","letter","memoizedLetterKey","React","memo","KeyboardRow","letters","activeKey","memoizedKeyboardRow","row1","row2","row3","OutputKeyboard","KeyBoardController","useSelector","$TextAreaContainer","$InputTextArea","textarea","$OutputTextArea","InputOutputTextArea","dispatch","useDispatch","handleChange","useCallback","e","filteredInput","target","value","replace","singleKeyChange","oldInput","newInput","newInputSub","slice","getIsSingleKeyChange","substr","onChange","spellCheck","placeholder","disabled","$MachineWrapper","$SidebarWrapper","$Header","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a66c273.chunk.js","sourcesContent":["export const rotorI: Rotor = {\n  name: 'rotorI',\n  type: 'rotor',\n  turnOver: 16, // 16 is Q\n  keys: 'EKMFLGDQVZNTOWYHXUSPAIBRCJ'.split('')\n};\n\nexport const rotorII: Rotor = {\n  name: 'rotorII',\n  type: 'rotor',\n  turnOver: 4, // 4 is E\n  keys: 'AJDKSIRUXBLHWTMCQGZNPYFVOE'.split('')\n};\n\nexport const rotorIII: Rotor = {\n  name: 'rotorIII',\n  type: 'rotor',\n  turnOver: 21, // 21 is V\n  keys: 'BDFHJLCPRTXVZNYEIWGAKMUSQO'.split('')\n};\n\nexport const reflectorUKWB: Rotor = {\n  name: 'UKW-B',\n  type: 'reflector',\n  keys: 'YRUHQSLDPXNGOKMIEBFZCWVJAT'.split('')\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { rotorI, rotorII, rotorIII } from '../../objects/rotors/rotors';\n\nconst initialState: RotorStore = [rotorI, rotorII, rotorIII];\n\nconst rotorSlice = createSlice({\n  name: 'handleRotors',\n  initialState,\n  reducers: {}\n});\n\nexport default rotorSlice.reducer;\n","export const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nexport const nonEncodableKeys = [' '];\nexport const validKeys = [...alphabet, ...nonEncodableKeys];\n","import { alphabet } from './array-alphabet';\n\nexport const getAlphabetKeyNum = (key: string) => alphabet.findIndex(k => k === key.toUpperCase());\n\nexport const getAlphabetKeyByNum = (keyNum: number) => alphabet[keyNum] || '';\n","import { getAlphabetKeyByNum, getAlphabetKeyNum } from '../utils/keys';\nimport { alphabet } from '../utils/array-alphabet';\nimport { modulo } from '../utils/modulo';\n\nconst getKeyNumWithPosition = (keyNum: number, position: number, op: 'add' | 'subtract') => {\n  let keyNumOpsPosition;\n  switch (op) {\n    case 'add':\n      keyNumOpsPosition = keyNum + position;\n      break;\n\n    case 'subtract':\n      keyNumOpsPosition = keyNum - position;\n      break;\n\n    default:\n      keyNumOpsPosition = null;\n  }\n\n  if (keyNumOpsPosition === null) return -1;\n  return modulo(keyNumOpsPosition, alphabet.length);\n};\n\nconst getOutputKeyNum = (\n  keys: string[],\n  keyIdx: number,\n  keyValue: string,\n  findByIndex?: boolean\n) => {\n  if (findByIndex) {\n    return keys.indexOf(keyValue);\n  }\n\n  return getAlphabetKeyNum(keys[keyIdx]);\n};\n\nconst encode = (slots: Slot[], initialKeyNum: number, isSecondPass?: boolean) => {\n  const encodedKeyNum = slots.reduce((keyNum: number, slot) => {\n    console.log('-------------------------');\n    console.log(`slot: ${slot.name} at position ${slot.position}. Given keyNum: ${keyNum}. Using rotor: ${slot.rotor.name}, with keys: ${slot.rotor.keys}`);\n    if (keyNum < 0) return -1;\n    const inputKeyNumWithPosition = getKeyNumWithPosition(keyNum, slot.position, 'add');\n    const inputKeyLetter = getAlphabetKeyByNum(inputKeyNumWithPosition);\n    const outputKeyNum = getOutputKeyNum(\n      slot.rotor.keys,\n      inputKeyNumWithPosition,\n      inputKeyLetter,\n      isSecondPass\n    );\n    console.log('Calc key as', getAlphabetKeyByNum(outputKeyNum));\n    console.log('Key num is, ', outputKeyNum);\n    console.log('output key num with positiuon', getKeyNumWithPosition(outputKeyNum, slot.position, 'subtract'));\n    return getKeyNumWithPosition(outputKeyNum, slot.position, 'subtract');\n  }, initialKeyNum);\n  return encodedKeyNum;\n};\n\nexport const handleEncoding = (slots: Slot[], initialKey: string) => {\n  // don't encode spaces\n  if (initialKey === ' ') return ' ';\n\n  const firstPassEncodedKeyNum = encode(slots, getAlphabetKeyNum(initialKey));\n  const secondPassSlots = slots.reverse();\n  secondPassSlots.shift(); // remove the reflector as it was used in the first pass.\n\n  console.log('first pass num: ', firstPassEncodedKeyNum);\n\n  const secondPassEncodedKeyNum = encode(slots, firstPassEncodedKeyNum, true);\n  console.log('second pass num: ', secondPassEncodedKeyNum);\n  return getAlphabetKeyByNum(secondPassEncodedKeyNum);\n};\n\nexport const handleRotation = (slots: Slot[]) => {\n  slots.some((slot, idx) => {\n    // reflectors don't have positions; so return\n    if (slot.rotor.type === 'reflector') return true;\n\n    // calculate slots new position\n    const newPosition = slot.position >= 25 ? 0 : slot.position + 1;\n    slots[idx].position = newPosition;\n\n    return !!(slot.rotor.turnOver !== slot.position);\n  });\n};\n\nexport const resetSlots = (slots: Slot[]) => {\n  slots.forEach(slot => {\n    slot.position = 0;\n  });\n};\n","export const modulo = (n: number, x: number) => ((n % x) + x) % x;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { rotorI, rotorII, rotorIII, reflectorUKWB } from '../../objects/rotors/rotors';\nimport { handleEncoding, handleRotation, resetSlots } from './utils';\n\nconst initialState: MachineStore = {\n  slots: [\n    {\n      name: 'slot1',\n      rotor: rotorI,\n      position: 0\n    }, {\n      name: 'slot2',\n      rotor: rotorII,\n      position: 0\n    }, {\n      name: 'slot3',\n      rotor: rotorIII,\n      position: 0\n    },\n    {\n      name: 'slot4',\n      rotor: reflectorUKWB,\n      position: 0\n    }\n  ],\n  outputKey: '',\n  totalInput: '',\n  totalOutput: ''\n};\n\nconst slotSlice = createSlice({\n  name: 'handleSlots',\n  initialState,\n  reducers: {\n    handleSingleRotorRotation(state, action: PayloadAction<string>) {\n      const { slots } = state;\n      const inputKey = action.payload;\n      state.totalInput += inputKey;\n\n      // don't rotate or encode for space.\n      if (inputKey === ' ') {\n        state.totalOutput += ' ';\n        return;\n      }\n\n      // handles positioning of rotors\n      handleRotation(slots);\n\n      // handles encoding\n      // passing copy of array to avoid the function making changes to state array.\n      const outputKey = handleEncoding([...slots], inputKey);\n\n      state.outputKey = outputKey;\n      state.totalOutput += outputKey;\n    },\n    // used to encode entire input at once\n    handleFullRotorRotation(state, action: PayloadAction<string>) {\n      const { slots } = state;\n      state.totalInput = action.payload.toUpperCase();\n\n      resetSlots(slots);\n      const encodedKeys = state.totalInput.split('').map(key => {\n        // don't rotate or encode for space.\n        if (key === ' ') return ' ';\n        handleRotation(slots);\n        return handleEncoding([...slots], key);\n      });\n\n      state.outputKey = encodedKeys[encodedKeys.length - 1];\n      state.totalOutput = encodedKeys.join('');\n    }\n  }\n});\n\nexport const {\n  handleSingleRotorRotation,\n  handleFullRotorRotation\n} = slotSlice.actions;\n\nexport default slotSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport rotorReducer from './services/rotors/rotors-slice';\nimport machineReducer from './services/machine/machine-slice';\n\nconst rootReducer = combineReducers({\n  rotors: rotorReducer,\n  machine: machineReducer\n});\n\nexport type EnigmaStore = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import { DefaultTheme } from 'styled-components';\n\nexport const theme: DefaultTheme = {\n  borderRadius: '6px',\n  colors: {\n    white: 'white',\n    primary: 'red',\n    litLetter: '#7a7b3d'\n  },\n  font: {\n    size: '1em'\n  },\n  baseline: '24px',\n  breakpoint: {\n    smallDesktop: '1200px',\n    tablet: '768px',\n    smallTablet: '580px',\n    mobile: '480px'\n  }\n};\n","import React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\n\nimport store from '../../store';\nimport { theme } from '../../theme/custom-theme';\n\nconst Providers: React.FC = ({ children }) => (\n  <ReduxProvider store={store}>\n    <ThemeProvider theme={theme}>\n      {children}\n    </ThemeProvider>\n  </ReduxProvider>\n);\n\nexport default Providers;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { EnigmaStore } from '../../rootReducer';\n\nexport const getMachine = (state: EnigmaStore) => state.machine;\nexport const getSlots = (state: EnigmaStore) => state.machine.slots;\n\nexport const selectSlots = createSelector(\n  [getMachine],\n  machine => machine.slots\n);\n\nexport const selectOutputKey = createSelector(\n  [getMachine],\n  machine => machine.outputKey\n);\n\nexport const selectTotalOutput = createSelector(\n  [getMachine],\n  machine => machine.totalOutput\n);\n\nexport const selectTotalInput = createSelector(\n  [getMachine],\n  machine => machine.totalInput\n);\n","export const themeModifier = (themeProp: string, modifier: number = 1) => {\n  const regex = /^(^-?\\d+(?:\\.\\d+)?)(.*)$/;\n  const match = themeProp.match(regex);\n  if (!match) return themeProp;\n\n  const [, prop, unit] = match;\n  const convertedProp = parseFloat(prop);\n\n  if (!convertedProp || !unit) return themeProp;\n  return `${convertedProp * modifier}${unit}`;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\n\ntype Props = {\n  letter: string;\n  isLit?: boolean;\n}\n\ntype $Props = {\n  isLit: boolean;\n}\n\nconst $Container = styled.div<$Props>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => themeModifier(p.theme.baseline, 3)};\n  height: ${p => themeModifier(p.theme.baseline, 3)};\n  border-radius: 50%;\n  border: 2px solid lightgray;\n  background-color: ${p => (p.isLit ? p.theme.colors.litLetter : 'grey')};\n  margin-left: ${p => themeModifier(p.theme.baseline, 0.25)};\n  margin-right: ${p => themeModifier(p.theme.baseline, 0.25)};\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallDesktop}) {\n    width: ${p => themeModifier(p.theme.baseline, 2)};\n    height: ${p => themeModifier(p.theme.baseline, 2)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.tablet}) {\n    width: ${p => themeModifier(p.theme.baseline, 1.5)};\n    height: ${p => themeModifier(p.theme.baseline, 1.5)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallTablet}) {\n    width: ${p => themeModifier(p.theme.baseline, 1)};\n    height: ${p => themeModifier(p.theme.baseline, 1)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.mobile}) {\n    width: ${p => themeModifier(p.theme.baseline, 0.75)};\n    height: ${p => themeModifier(p.theme.baseline, 0.75)};\n  }\n`;\n\nconst $Letter = styled.p`\n  color: ${p => p.theme.colors.white};\n  font-size: ${p => themeModifier(p.theme.font.size, 2)};\n  flex: 0;\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallDesktop}) {\n    font-size: ${p => themeModifier(p.theme.font.size, 1.5)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.tablet}) {\n    font-size: ${p => themeModifier(p.theme.font.size, 1)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallTablet}) {\n    font-size: ${p => themeModifier(p.theme.font.size, 0.75)};\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.mobile}) {\n    font-size: ${p => themeModifier(p.theme.font.size, 0.65)};\n  }\n`;\n\nconst LetterKey: React.FC<Props> = ({ letter, isLit = false }) => (\n  <$Container isLit={isLit}>\n    <$Letter>{letter.toUpperCase()}</$Letter>\n  </$Container>\n);\n\nconst memoizedLetterKey = React.memo(LetterKey);\n\nexport { memoizedLetterKey as LetterKey };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\n\nimport { LetterKey } from '../letter-key';\n\ntype Props = {\n  letters: string[];\n  activeKey: string;\n}\n\nconst $Container = styled.div`\n  display: flex;\n  margin-bottom: ${p => themeModifier(p.theme.baseline, 0.5)};\n`;\n\nconst KeyboardRow: React.FC<Props> = ({ letters, activeKey }) => (\n  <$Container>\n    {letters.map(letter => {\n      const isLit = letter === activeKey;\n      return (\n        <LetterKey key={`${letter}`} letter={letter} isLit={isLit} />\n      );\n    })}\n  </$Container>\n);\n\nconst memoizedKeyboardRow = React.memo(KeyboardRow);\n\nexport { memoizedKeyboardRow as KeyboardRow };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { KeyboardRow } from './row';\n\ntype Props = {\n  activeKey: string;\n}\n\nconst row1 = 'QWERTYUIOP'.split('');\nconst row2 = 'ASDFGHJKL'.split('');\nconst row3 = 'ZXCVBNM'.split('');\n\nconst $Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const OutputKeyboard: React.FC<Props> = ({ activeKey }) => (\n  <$Container>\n    <KeyboardRow letters={row1} activeKey={activeKey} />\n    <KeyboardRow letters={row2} activeKey={activeKey} />\n    <KeyboardRow letters={row3} activeKey={activeKey} />\n  </$Container>\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectOutputKey } from '../../services/machine/machine-selector';\n\nimport { OutputKeyboard } from './output';\n\nexport const KeyBoardController = () => {\n  const outputKey = useSelector(selectOutputKey);\n\n  return (\n    <OutputKeyboard activeKey={outputKey} />\n  );\n};\n","import React, { useCallback, ChangeEvent } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { themeModifier } from '../../theme/utils';\nimport { filterInvalidKeys, getIsSingleKeyChange } from '../../services/input-output-text/utils';\nimport { selectTotalOutput, selectTotalInput } from '../../services/machine/machine-selector';\nimport { handleSingleRotorRotation, handleFullRotorRotation } from '../../services/machine/machine-slice';\n\nconst $Container = styled.div`\n  p {\n    color: ${p => themeModifier(p.theme.colors.white)}\n  }\n`;\n\nconst $TextAreaContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: ${p => themeModifier(p.theme.baseline, 1)};\n  \n  textarea {\n    flex: 1;\n    font-size: ${p => themeModifier(p.theme.font.size, 1.5)};\n    text-transform: uppercase;\n    height: 6em;\n    max-width: 30em;\n    min-width: 20em;\n    margin: ${p => themeModifier(p.theme.baseline, 0.5)};\n    resize: none;\n  }\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallTablet}) {\n    textarea {\n      height: 4em;\n      min-width: 10em;\n    }\n  }\n`;\n\nconst $InputTextArea = styled.textarea`\n  height: 10em;\n`;\n\nconst $OutputTextArea = styled.textarea`\n  background-color: ${p => themeModifier(p.theme.colors.white)};\n`;\n\nexport const InputOutputTextArea = () => {\n  const totalOutput = useSelector(selectTotalOutput);\n  const totalInput = useSelector(selectTotalInput);\n  const dispatch = useDispatch();\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    const filteredInput = filterInvalidKeys(e.target.value);\n    const singleKeyChange = getIsSingleKeyChange(totalInput, filteredInput);\n\n    if (singleKeyChange) {\n      // only take the last character; as it's the only new one.\n      dispatch(handleSingleRotorRotation(filteredInput.substr(-1)));\n    } else {\n      // re-encode the entire input\n      dispatch(handleFullRotorRotation(filteredInput));\n    }\n  }, [totalInput, dispatch]);\n\n  return (\n    <$Container>\n      <p>{'Enter text below to be encypted or decrypted.'}</p>\n      <$TextAreaContainer>\n        <$InputTextArea onChange={handleChange} spellCheck={false} placeholder={'Input text here...'} />\n        <$OutputTextArea disabled value={totalOutput} placeholder={'Output here...'} />\n      </$TextAreaContainer>\n    </$Container>\n  );\n};\n","export const containsValidKeys = (keys: string) => /^[A-Z]+$/.test(keys.toUpperCase());\n\nexport const filterInvalidKeys = (keys: string) => keys.replace(/[^a-zA-Z ]+/gm, '');\n\nexport const getIsSingleKeyChange = (oldInput: string, newInput: string) => {\n  // handle case that nothing has been entered yet.\n  if (oldInput.length === 0 && newInput.length === 1) return true;\n\n  // remove last character as we only want to check if\n  // the inputs are the same without newly added characters\n  const newInputSub = newInput.slice(0, -1);\n  return oldInput.toUpperCase() === newInputSub.toUpperCase();\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { KeyBoardController } from '../keyboard';\nimport { InputOutputTextArea } from '../input-output-text';\nimport { themeModifier } from '../../theme/utils';\n\nconst $Container = styled.div`\n  display: flex;\n`;\n\nconst $MachineWrapper = styled.div`\n  flex: 1;\n`;\n\nconst $SidebarWrapper = styled.div`\n  flex: 0 0 ${p => themeModifier(p.theme.baseline, 10)};\n\n  @media screen and (max-width: 950px) {\n    display: none;\n  }\n`;\n\nconst $Header = styled.h1`\n  color: ${p => p.theme.colors.white};\n\n  @media screen and (max-width: ${p => p.theme.breakpoint.smallTablet}) {\n    font-size: ${p => themeModifier(p.theme.font.size, 1.5)};\n  }\n`;\n\nconst App = () => (\n  <$Container>\n    <$SidebarWrapper>\n      <p>{'sidebar stuff here'}</p>\n    </$SidebarWrapper>\n    <$MachineWrapper>\n      <$Header>{'Enigma'}</$Header>\n      <KeyBoardController />\n      <InputOutputTextArea />\n    </$MachineWrapper>\n  </$Container>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Providers from './services/providers';\nimport App from './scenes/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}